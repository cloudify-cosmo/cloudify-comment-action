name: Parse Cloudify Related comments
description:  parse issue comment then pass action to Cloudify.
branding:
  icon: cloud
  color: white
inputs:
  comment:
    description: comment to parse and take action based on
    required: true
  github_token:
    description: github token that will be used to add comment to PR
    default: "-"
    required: false
  environment-name:
    description: Name of Cloudify environment
    required: false
    default: "-"
  environment-id:
    description: ID of Cloudify environment
    required: false
    default: "-"
  labels:
    description: |
      A labels list of the form <key>:<value>,<key>:<value>.
      Any comma and colon in <value> must be escaped with \.
      The labelsâ€™ keys are saved in lowercase.
    required: false
    default: "-"
  module-file:
    description: URL/path to Terraform module archive
    required: false
    default: "-"
  module-source-path:
    description: path to Terraform module inside the archive
    required: false
    default: "-"
  variables-file:
    description: YAML/JSON file containing template variables
    required: false
    default: "-"
  environment-file:
    description: |
      YAML/JSON file containing environment variables to pass to the Terraform process
    required: false
    default: "-"
  environment-mapping:
    description: |
        A whitespace-delimited list of strings. For each item:

        * If it is of the form `k=v`, then the value of the environment variable `k` is passed
          as environment variable `v` to Terraform
        * Otherwise, let the value be `x`; then the environment variable `x` is passed as-is
          to Terraform

        This effectively passes environment variables, visible to the CI/CD platform,
        as environment variables to Terraform. Useful, among others, for
        passing Cloud credentials - stored in the CI/CD platform - to Terraform
    required: false
    default: "-"
  skip-apply-comment:
    description: boolean to control whether to add terraform apply comment to PR
    default: "false"
    required: false
outputs:
  result:
    description: Comment handling result
    value: ${{ steps.terraform_apply.outputs.terraform-outputs || steps.terraform_plan.outputs.terraform-plan || steps.format_command.outputs.result }}
runs:
  using: "composite"
  steps:
      - name: Check if comment starts with cfy and remove it
        id: format_comment
        shell: python
        run: |
          comment = "${{ inputs.comment }}"
          comment = comment.strip()
          if comment.startswith('cfy'):
            comment = comment.replace('cfy', '', 1).strip()
          print ('::set-output name=command::{0}'.format(comment))

      # handle terraform logic
      - name: Get PR SHA
        id: sha
        if: ${{ startsWith(steps.format_comment.outputs.command, 'terraform') }}
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.pulls.get({
              owner,
              repo,
              pull_number: number,
            });
            return pr.data.head.sha

      - name: Checkout code
        if: ${{ startsWith(steps.format_comment.outputs.command, 'terraform') }}
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.sha.outputs.result }}

      - name: Get PR Repo Link
        id: get_repo_link
        if: ${{ inputs.module-file == '-' && startsWith(steps.format_comment.outputs.command, 'terraform')  }}
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const { owner, repo, number } = context.issue;
            const pr = await github.pulls.get({
              owner,
              repo,
              pull_number: number,
            });
            return pr.data.head.repo.html_url+'/archive/refs/heads/'+pr.data.head.ref+'.zip';

      - name: Set Module Path
        id: check_module_path
        shell: python
        run: |
          module_file = "${{ inputs.module-file }}"
          repo_link = "${{steps.get_repo_link.outputs.result}}"
          if module_file != '-':
            print ('::set-output name=module-file::{0}'.format(module_file))
          else:
            print ('::set-output name=module-file::{0}'.format(repo_link))

      - name: Execute terraform plan
        id: terraform_plan
        if: ${{ steps.format_comment.outputs.command == 'terraform plan' }}
        uses: cloudify-cosmo/terraform-plan-action@v1.2
        with:
          environment-name: ${{ inputs.environment-name }}
          environment-id: ${{ inputs.environment-id }}
          labels: ${{ inputs.labels }}
          module-file: ${{steps.check_module_path.outputs.module-file}}
          module-source-path: ${{ inputs.module-source-path }}
          variables-file: ${{ inputs.variables-file }}
          environment-file: ${{ inputs.environment-file }}
          environment-mapping: ${{ inputs.environment-mapping }}

      - name: Add plan comment
        if: ${{ inputs.github_token != '-' && steps.format_comment.outputs.command == 'terraform plan' }}
        uses: actions/github-script@v3
        env:
          PLAN: "terraform\n${{ steps.terraform_plan.outputs.terraform-plan }}"
        with:
          github-token: ${{ inputs.github_token }}
          script: |
            const output = `#### Terraform Plan

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Execute terraform apply
        id: terraform_apply
        if: ${{ steps.format_comment.outputs.command == 'terraform apply' }}
        uses: cloudify-cosmo/terraform-apply-action@v1.2
        with:
          environment-name: ${{ inputs.environment-name }}
          environment-id: ${{ inputs.environment-id }}
          labels: ${{ inputs.labels }}
          module-file: ${{steps.check_module_path.outputs.module-file}}
          module-source-path: ${{ inputs.module-source-path }}
          variables-file: ${{ inputs.variables-file }}
          environment-file: ${{ inputs.environment-file }}
          environment-mapping: ${{ inputs.environment-mapping }}

      - name: Add apply comment
        if: ${{ inputs.github_token != '-' && inputs.skip-apply-comment == 'false' && steps.format_comment.outputs.command == 'terraform apply' }}
        uses: actions/github-script@v3
        env:
          MODULES: "terraform\n${{ steps.terraform_apply.outputs.terraform-outputs }}"
        with:
          github-token: ${{ inputs.github_token }}
          script: |
            const output = `#### Terraform Modules

            <details><summary>Show Modules</summary>

            \`\`\`\n
            ${process.env.MODULES}
            \`\`\`

            </details>`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Execute terraform destroy
        id: terraform_destroy
        if: ${{ steps.format_comment.outputs.command == 'terraform destroy' }}
        uses: cloudify-cosmo/terraform-destroy-action@v1.2
        with:
          environment-name: ${{ inputs.environment-name }}
          environment-id: ${{ inputs.environment-id }}
          labels: ${{ inputs.labels }}

      - name: Execute cloudify command from comment
        id: execute_command
        if: ${{ !startsWith(steps.format_comment.outputs.command, 'terraform') }}
        uses: cloudify-cosmo/cli-action@v1.2
        with:
          command: ${{steps.format_comment.outputs.command}}

      - name: Format command output
        id: format_command
        if: ${{ !startsWith(steps.format_comment.outputs.command, 'terraform') }}
        shell: python
        run: |
          cli_output = ${{steps.execute_command.outputs.cli-output}}
          cli_output = cli_output.decode()
          cli_output = cli_output.replace('%','%25')
          cli_output = cli_output.replace('\n','%0A')
          cli_output = cli_output.replace('\r','%0D')
          print ('::set-output name=result::{0}'.format(cli_output))

      - name: Add comment
        if: ${{ inputs.github_token != '-' && !startsWith(steps.format_comment.outputs.command, 'terraform') }}
        uses: actions/github-script@v3
        env:
          COMMENT: "${{ steps.format_command.outputs.result }}"
        with:
          github-token: ${{ inputs.github_token }}
          script: |
            const output = `#### Command Result

            <details><summary>Show Result</summary>

            \`\`\`\n
            ${process.env.COMMENT}
            \`\`\`

            </details>`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
